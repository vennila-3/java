
Object-oriented programming generally referred to as OOPS is the backbone of java

-----------------------------------   Method  ------------------------------------------------
    The method in Java or Methods of Java is a collection of statements that perform some specific task and return the result to the caller. 
    A Java method can perform some specific task without returning anything. 
    A method is like a function used to expose the behavior of an object.
    It is a set of codes that perform a particular task.

Advantage of Method
   Code Reusability
   Code Optimization 
Types of method:
   predefine method
   uder define method

-----------------------------------------------   ACCESS MODIFIERS  --------------------------------------------------
Access modifiers help to restrict the scope of a class, constructor, variable, method, or data member. 
It provides security, accessibility, etc to the user depending upon the access modifier used with the element.

              Types of Access Modifiers in Java
                  Default – No keyword required
                  Private
                  Protected
                  Public
DEFAULT:
        having default access modifiers are accessible only within the same package.
          // Java program to illustrate default modifier 
          package p1; 
        // Class Geek is having Default access modifier 
        class Geek 
         { 
	    void display() 
	   { 
		System.out.println("Hello World!"); 
	   } 
       }

PRIVATE:
  The methods or data members declared as private are accessible only within the class in which they are declared.
  Any other class of the same package will not be able to access these members.
***  Top-level classes or interfaces can not be declared as private because private means “only visible within the enclosing class”.
  protected means “only visible within the enclosing class and any subclasses”.

PROTECTED
    The methods or data members declared as protected are accessible within the same package or subclasses in different packages.
    In this example, we will create two packages p1 and p2. Class A in p1 is made public, to access it in p2. The method display in class A
    is protected and class B is inherited from class A and this protected method is then accessed by creating an object of class B.

Public Access modifier
     The public access modifier has the widest scope among all other access modifiers.
     Classes, methods, or data members that are declared as public are accessible from everywhere in the program.
    There is no restriction on the scope of public data members.

------------------------------------  CONSTRUCTOR  ----------------------------------------------
 A constructor in Java is a special method that is used to initialize objects.
 The constructor is called when an object of a class is created. 
 It can be used to set initial values for object attributes.
     TYPES:
Default Constructor  -
        Default constructor provides the default values to the object like 0, null, etc. depending on the type.
        A constructor that has no parameters is known as default the constructor. 
        A default constructor is invisible. And if we write a constructor with no arguments, the compiler does not create a default constructor.
Parameterized Constructor  -
         If we want to initialize fields of the class with our own values, then use a parameterized constructor.
Copy Constructor
         copy constructor is passed with another object which copies the data available from the passed object to the newly created object.

------------------------------------------ PILLERS ---------------------------------------

These concepts aim to implement real-world entities in programs.

Abstraction
Encapsulation
Inheritance
Polymorphism.


------------------------------- abstraction ------------------------------
Abstraction in Java is the process in which we only show essential details/functionality to the user. 
The non-essential implementation details are not displayed to the user. 
Abstraction Is hiding the internal implementation and just highlight the set of services

achieved by
    interfaces
    abstract classes. We can achieve 100% abstraction using interfaces.

               ----------------            abstract class                 ----------------------- 
Abstract classes cannot be instantiated (object)
Abstract methods do not have a body
*)Abstract classes can have both abstract and concrete method
abstract keyword for declaring top-level classes (Outer class) as well as inner classes as abstract

        ------------------------------- Interface   ------------------------
 An interface in Java is a blueprint of a behavior. specify the behavior of a class
It has static constants and abstract methods.
The interface in Java is a mechanism to achieve abstraction.  it have only abstract method.
It is used to achieve abstraction and multiple inheritances in Java using Interface. A class can implement more than one interface.
Java Interface also represents the IS-A relationship.

Advantages of Interfaces in Java
Without bothering about the implementation part, we can achieve the security of the implementation.
In Java, multiple inheritances are not allowed, however, you can use an interface to make use of it as you can implement more than one interface

How many Types of interface in Java?
Functional Interface
Marker interface


-------------------------------------------  ENCAPSULATION  ---------------------------------------------------
 
Encapsulation is defined as the wrapping up of data under a single unit.
It is the mechanism that binds together code and the data it manipulates.
Java Encapsulation is a way of hiding the implementation details of a class from outside access and only exposing a public interface that can be used to interact with the class.
Encapsulation is achieved by
   declaring the instance variables of a class as private, which means they can only be accessed within the class.
   to allow outside access to the instance variables, public methods called getters and setters are defined, which are used to retrieve and modify the values of the instance variables, respectively.

ADVANTAGE:
    data hiding
    Increase flexibility
    Reusability
Disadvantages of Encapsulation in Java
      Can lead to increased complexity, especially if not used properly.
      Can make it more difficult to understand how the system works.
      May limit the flexibility of the implementation.

    ------------------ ABSTRACT VS ENCAPSULATION  -----------------------------------
abstraction:
         Abstraction focus is on “what” should be done.	
         The objects that help to perform abstraction are encapsulated.	
encapsulation:
       Encapsulation focus is on “How” it should be done.
       Whereas the objects that result in encapsulation need not be abstracted.
abstraction:
       We can implement abstraction using abstract class and interfaces.
       Abstraction is the method of hiding the unwanted information.	
encapsulation:
      encapsulation can be implemented using by access modifier i.e. private, protected and public.
      encapsulation is a method to hide the data in a single entity or unit along with a method to protect information from outside




------------------------------------  INHERITANCE  -------------------------------------------
Inheritance in Java is a mechanism in which one object acquires all the properties and behaviors of a parent object.
IS-A relationship which is also known as a parent-child relationship.

why do we need inheritance:
    code reusability
    method overloading
    abstraction

TYPES:
      Single Inheritance -When a class inherits another class, it is known as a single inheritance.
      Multilevel Inheritance   -  chain of inheritance  (grandfather -> father -> son)
      Hierarchical Inheritance   - When two or more classes inherits a single class, all have one parent class
      Multiple Inheritance   - not support but we can acheive using interface
      Hybrid Inheritance -

             Association, Composition and Aggregation in Java.

Association is a relation between two separate classes which establishes through their Objects.
Association can be one-to-one, one-to-many, many-to-one, many-to-many.

             forms of association.
Composition 
Aggregation  

